{"pageProps":{"post":{"attributes":{},"html":"<p>What if we wanted to track pageviews on each article to show social proof that people are using the wikis? We could do that in Postgres but that&#39;s a lot of writes for not very important data. That&#39;s actually what Redis excels at, so let&#39;s go implement that!</p>\n<p>Make a new file at src/apps/actions/pageviews.ts and put this in there</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-string\">&quot;use server&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> redis <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/cache&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">keyFor</span> = (<span class=\"hljs-params\"><span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span></span>) =&gt; <span class=\"hljs-string\">`pageviews:article:<span class=\"hljs-subst\">${id}</span>`</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">incrementPageview</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">articleId</span>: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">const</span> articleKey = <span class=\"hljs-title function_\">keyFor</span>(articleId);\n  <span class=\"hljs-keyword\">const</span> newVal = <span class=\"hljs-keyword\">await</span> redis.<span class=\"hljs-title function_\">incr</span>(articleKey);\n  <span class=\"hljs-keyword\">return</span> +newVal;\n}\n</code></pre><ul>\n<li>incr both increments the existing number <em>and</em> it returns the current value.</li>\n</ul>\n<p>Now let&#39;s add it to our wiki-article-viewer.ts</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// top</span>\n<span class=\"hljs-keyword\">import</span> { incrementPageview } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/app/actions/pageviews&quot;</span>;\n\n<span class=\"hljs-comment\">// near top of React component</span>\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchPageview</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> newCount = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">incrementPageview</span>(article.<span class=\"hljs-property\">id</span>);\n    <span class=\"hljs-title function_\">setLocalPageviews</span>(newCount ?? <span class=\"hljs-literal\">null</span>);\n  }\n  <span class=\"hljs-title function_\">fetchPageview</span>();\n}, []);\n\n<span class=\"hljs-comment\">// under the Article badge</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;ml-3 flex items-center text-sm text-muted-foreground&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Eye</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;h-4 w-4 mr-1&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{localPageviews ? localPageviews : &quot;‚Äî&quot;}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;ml-1&quot;</span>&gt;</span>views<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n</code></pre><p>That&#39;s it! Now we should have a very cool page counter, all being powered by Redis.</p>\n<blockquote>\n<p>üèÅ This is the <a href=\"https://github.com/btholt/fullstack-next-wiki/tree/main/06-caching\">06-caching</a> checkpoint. Open that folder in the sample project repo to go to where we are as of right here.</p>\n</blockquote>\n","markdown":"What if we wanted to track pageviews on each article to show social proof that people are using the wikis? We could do that in Postgres but that's a lot of writes for not very important data. That's actually what Redis excels at, so let's go implement that!\n\nMake a new file at src/apps/actions/pageviews.ts and put this in there\n\n```typescript\n\"use server\";\n\nimport redis from \"@/cache\";\n\nconst keyFor = (id: number | string) => `pageviews:article:${id}`;\n\nexport async function incrementPageview(articleId: number) {\n  const articleKey = keyFor(articleId);\n  const newVal = await redis.incr(articleKey);\n  return +newVal;\n}\n```\n\n- incr both increments the existing number _and_ it returns the current value.\n\nNow let's add it to our wiki-article-viewer.ts\n\n```typescript\n// top\nimport { incrementPageview } from \"@/app/actions/pageviews\";\n\n// near top of React component\nuseEffect(() => {\n  async function fetchPageview() {\n    const newCount = await incrementPageview(article.id);\n    setLocalPageviews(newCount ?? null);\n  }\n  fetchPageview();\n}, []);\n\n// under the Article badge\n<div className=\"ml-3 flex items-center text-sm text-muted-foreground\">\n  <Eye className=\"h-4 w-4 mr-1\" />\n  <span>{localPageviews ? localPageviews : \"‚Äî\"}</span>\n  <span className=\"ml-1\">views</span>\n</div>;\n```\n\nThat's it! Now we should have a very cool page counter, all being powered by Redis.\n\n> üèÅ This is the [06-caching][checkpoint] checkpoint. Open that folder in the sample project repo to go to where we are as of right here.\n\n[checkpoint]: https://github.com/btholt/fullstack-next-wiki/tree/main/06-caching\n","slug":"counting","title":"Counting","section":"Key Value Store","icon":"key","filePath":"/home/runner/work/build-a-fullstack-nextjs-app-v4/build-a-fullstack-nextjs-app-v4/lessons/06-key-value-store/C-counting.md","nextSlug":"/lessons/email/resend","prevSlug":"/lessons/key-value-store/caching"}},"__N_SSG":true}