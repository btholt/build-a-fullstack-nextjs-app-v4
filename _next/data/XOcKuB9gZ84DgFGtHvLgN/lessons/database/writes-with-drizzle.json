{"pageProps":{"post":{"attributes":{},"html":"<p>Now we&#39;ve used server helpers to fetch data, let&#39;s use form actions to submit data.</p>\n<blockquote>\n<p>If server actions are new to you, <a href=\"https://holt.fyi/intermediate-react\">check out Intermediate React v6</a> - we cover these with Next.js in depth.</p>\n</blockquote>\n<p>We&#39;re going to be editing app/actions/articles.ts. Let&#39;s start with creating a new article.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> { eq } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;drizzle-orm&quot;</span>;\n<span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/db/index&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { articles } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/db/schema&quot;</span>;\n\n<span class=\"hljs-comment\">// replace create article</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createArticle</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">CreateArticleInput</span></span>) {\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> stackServerApp.<span class=\"hljs-title function_\">getUser</span>();\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;‚ùå Unauthorized&quot;</span>);\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;‚ú® createArticle called:&quot;</span>, data);\n\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-title function_\">insert</span>(articles).<span class=\"hljs-title function_\">values</span>({\n    <span class=\"hljs-attr\">title</span>: data.<span class=\"hljs-property\">title</span>,\n    <span class=\"hljs-attr\">content</span>: data.<span class=\"hljs-property\">content</span>,\n    <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-string\">&quot;&quot;</span> + <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(),\n    <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">authorId</span>: user.<span class=\"hljs-property\">id</span>,\n  });\n\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;Article create logged&quot;</span> };\n}\n</code></pre><ul>\n<li>Looks fairly similar to our reads, only here we just use <code>insert</code> instead of <code>select</code>.</li>\n<li>We&#39;re only checking that the user is logged in, not that the correct user can edit the article. We&#39;ll implement proper authorization in the next section.</li>\n</ul>\n<p>Let&#39;s do update and delete.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateArticle</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">UpdateArticleInput</span></span>) {\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> stackServerApp.<span class=\"hljs-title function_\">getUser</span>();\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;‚ùå Unauthorized&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> Replace with actual database update</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;üìù updateArticle called:&quot;</span>, { id, ...data });\n\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> db\n    .<span class=\"hljs-title function_\">update</span>(articles)\n    .<span class=\"hljs-title function_\">set</span>({\n      <span class=\"hljs-attr\">title</span>: data.<span class=\"hljs-property\">title</span>,\n      <span class=\"hljs-attr\">content</span>: data.<span class=\"hljs-property\">content</span>,\n    })\n    .<span class=\"hljs-title function_\">where</span>(<span class=\"hljs-title function_\">eq</span>(articles.<span class=\"hljs-property\">id</span>, +id));\n\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">`Article <span class=\"hljs-subst\">${id}</span> update logged`</span> };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">deleteArticle</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> stackServerApp.<span class=\"hljs-title function_\">getUser</span>();\n  <span class=\"hljs-keyword\">if</span> (!user) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;‚ùå Unauthorized&quot;</span>);\n  }\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;üóëÔ∏è deleteArticle called:&quot;</span>, id);\n\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-title function_\">delete</span>(articles).<span class=\"hljs-title function_\">where</span>(<span class=\"hljs-title function_\">eq</span>(articles.<span class=\"hljs-property\">id</span>, +id));\n\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">`Article <span class=\"hljs-subst\">${id}</span> delete logged (stub)`</span> };\n}\n</code></pre><p>Nothing groundbreaking here! Same motion, just with <code>update</code> and <code>delete</code>!</p>\n","markdown":"Now we've used server helpers to fetch data, let's use form actions to submit data.\n\n> If server actions are new to you, [check out Intermediate React v6][v6] - we cover these with Next.js in depth.\n\nWe're going to be editing app/actions/articles.ts. Let's start with creating a new article.\n\n```typescript\n// at top\nimport { eq } from \"drizzle-orm\";\nimport db from \"@/db/index\";\nimport { articles } from \"@/db/schema\";\n\n// replace create article\nexport async function createArticle(data: CreateArticleInput) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    throw new Error(\"‚ùå Unauthorized\");\n  }\n  console.log(\"‚ú® createArticle called:\", data);\n\n  const response = await db.insert(articles).values({\n    title: data.title,\n    content: data.content,\n    slug: \"\" + Date.now(),\n    published: true,\n    authorId: user.id,\n  });\n\n  return { success: true, message: \"Article create logged\" };\n}\n```\n\n- Looks fairly similar to our reads, only here we just use `insert` instead of `select`.\n- We're only checking that the user is logged in, not that the correct user can edit the article. We'll implement proper authorization in the next section.\n\nLet's do update and delete.\n\n```typescript\nexport async function updateArticle(id: string, data: UpdateArticleInput) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    throw new Error(\"‚ùå Unauthorized\");\n  }\n\n  // TODO: Replace with actual database update\n  console.log(\"üìù updateArticle called:\", { id, ...data });\n\n  const response = await db\n    .update(articles)\n    .set({\n      title: data.title,\n      content: data.content,\n    })\n    .where(eq(articles.id, +id));\n\n  return { success: true, message: `Article ${id} update logged` };\n}\n\nexport async function deleteArticle(id: string) {\n  const user = await stackServerApp.getUser();\n  if (!user) {\n    throw new Error(\"‚ùå Unauthorized\");\n  }\n\n  console.log(\"üóëÔ∏è deleteArticle called:\", id);\n\n  const response = await db.delete(articles).where(eq(articles.id, +id));\n\n  return { success: true, message: `Article ${id} delete logged (stub)` };\n}\n```\n\nNothing groundbreaking here! Same motion, just with `update` and `delete`!\n\n[v6]: https://holt.fyi/intermediate-react\n","slug":"writes-with-drizzle","title":"Writes with Drizzle","section":"Database","icon":"database","filePath":"/home/runner/work/build-a-fullstack-nextjs-app-v4/build-a-fullstack-nextjs-app-v4/lessons/04-database/D-writes-with-drizzle.md","nextSlug":"/lessons/database/authorization","prevSlug":"/lessons/database/query-with-drizzle"}},"__N_SSG":true}