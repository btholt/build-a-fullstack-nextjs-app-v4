{"pageProps":{"post":{"attributes":{"title":"shadcn"},"html":"<p>We are going to be using <a href=\"https://ui.shadcn.com/\">shadcn ui</a> for our design system. Let&#39;s dissect that a bit further.</p>\n<ul>\n<li>shadcn UI is based on <a href=\"https://workos.com/blog/what-is-the-difference-between-radix-and-shadcn-ui\">Radix</a> (this is a good blog post on the difference). Radix is a component library that provides unstyled primitives that are well designed for accessibility and usability. shadcn takes these and adds a sane set of default styles to them.</li>\n<li>Both of these are in turn built on top of [Tailwind][tailwind]. Tailwind is a styling system that breaks every CSS value into its own CSS class, so instead of having stylesheets, you just directly apply the CSS to your React. If you&#39;ve never used it before it can be abrasive but over time it&#39;s won over a critical mass of UI developers. When done well it&#39;s a delight to work in.</li>\n</ul>\n<blockquote>\n<p>Fun fact: <a href=\"https://x.com/shadcn\">shadcn is a person</a>. He works at Vercel.</p>\n</blockquote>\n<p>Essentially it&#39;s a opinionated set of styles and components. It&#39;s also a CLI that adds the components as you need them - it doesn&#39;t include everything at once which is nice.</p>\n<p>Let&#39;s go ahead and initialize it.</p>\n<pre><code class=\"hljs language-bash\">npx shadcn@3.3.1 init\n</code></pre><blockquote>\n<p>Normally you should do <code>shadcn@latest</code> but we&#39;re going to be sticking to 3.3.1 for this course.</p>\n</blockquote>\n<p>This will ask you to choose a tone. I think I went with slate? Feel free to choose your own base tone.</p>\n<p>This should add some styles and make some modifications to your project. One thing to note is that this will include some global styles, but in and of itself shadcn is a component system. You need to individually add components. It does install a few dependencies like the icon library, some CSS helpers, and such. Don&#39;t worry about those too much - it&#39;s all for shadcn.</p>\n<pre><code class=\"hljs language-bash\">npx shadcn@3.3.1 add @shadcn/navigation-menu\nnpx shadcn@3.3.1 add @shadcn/button\n</code></pre><p>Notice inside your app directory there is now a component/ui directory, and it has a navigation-menu.tsx and a button.tsx file in it. This is how shadcn works - it adds the code for the component to your library. This is cool because now it&#39;s <em>your</em> component. Rather than trying to rebase and monkey patch a library, you can just directly edit the code. Long term this is more sustainable for using shadcn to craft your own design system instead of just a thin wrapper on top of something like Bootstrap.</p>\n<p>Let&#39;s go ahead and make a navigation menu using our new component (we&#39;re not going to modify any of the shadcn components themselves today but you should feel free to, that&#39;s why the code is in your codebase!)</p>\n<p>Create <code>nav-bar.tsx</code> in your components directory and put:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Link</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">NavigationMenu</span>,\n  <span class=\"hljs-title class_\">NavigationMenuList</span>,\n  <span class=\"hljs-title class_\">NavigationMenuItem</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/ui/navigation-menu&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Button</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/ui/button&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NavBar</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;w-full border-b bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60 sticky top-0 z-50&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;container mx-auto flex h-16 items-center justify-between px-4&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;flex items-center gap-2&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span>\n            <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span>\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;font-bold text-xl tracking-tight text-gray-900&quot;</span>\n          &gt;</span>\n            Wikimasters\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationMenu</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationMenuList</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;flex items-center gap-2&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationMenuItem</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">asChild</span> <span class=\"hljs-attr\">variant</span>=<span class=\"hljs-string\">&quot;outline&quot;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/signin&quot;</span>&gt;</span>Sign In<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NavigationMenuItem</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationMenuItem</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">asChild</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/signup&quot;</span>&gt;</span>Sign Up<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NavigationMenuItem</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NavigationMenuList</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NavigationMenu</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span></span>\n  );\n}\n</code></pre><p>This is what working in Tailwind feels like (and thus Radix and shadcn, since they all use Tailwind). People think this feels gross, not using CSS and putting it all in the class, but here&#39;s the pitch. Everything we make in React is a component, and in theory we should compose all our pages of components that are glued together with bits of CSS. If you&#39;re following this pattern, all the components get self-contained CSS in their React components, and the bit of CSS you would write to glue pages together well ends up just being on the page itself via Tailwind classes. If you have something that <em>should</em> share CSS with something else, then it should be a component.</p>\n<p>In practice, I find this to be about 95% true - most things can just live in Tailwind classes with components. If you&#39;ve ever maintained a large project before, you know deleting CSS is the hardest thing to do - it&#39;s so hard to tell what&#39;s used and what&#39;s not. When I worked at LinkedIn in 2015-ish, they had <em>2 megabytes</em> of CSS, most of which was hand written. They had no idea how to fix it, and it&#39;s ultimately where the <a href=\"https://css-blocks.com/\">CSS Blocks</a> project came from (which if it didn&#39;t inspire Tailwind, it certainly had similar goals.) We&#39;ve tried so many ways to essentially get to this point - where code and styling are tightly linked in an obvious and non-footgun sort of way: <a href=\"https://getbem.com/\">BEM</a>, <a href=\"https://acss-io.github.io/atomizer/\">Atomic CSS</a>, <a href=\"https://styled-components.com/\">styled-components</a>, <a href=\"https://emotion.sh/docs/introduction\">Emotion</a>, and <a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>. <a href=\"https://sass-lang.com/\">Sass</a>, <a href=\"https://lesscss.org/\">Less</a>, and <a href=\"https://stylus-lang.com/\">Stylus</a> deserve mention too!</p>\n<p>As you can see, we&#39;ve been around the bend and many a heated discussion has been had on how best to style a project, and this just one of them (albeit the most popular at the moment.) I&#39;m okay if you choose not to use Tailwind or these things on your projects, but it&#39;s what we&#39;re going to use today.</p>\n<p>Okay, let&#39;s go add our nav bar to layout. Go to layout.tsx and add</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NavBar</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/ui/nav-bar&quot;</span>;\n\n<span class=\"hljs-comment\">// just inside &lt;body&gt;</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavBar</span> /&gt;</span></span>;\n</code></pre><p>Run your dev server with <code>npm run dev</code> and you should see your nav bar!</p>\n<p>Let&#39;s do one more and add wiki card components to show the loop again. Go to <a href=\"https://ui.shadcn.com/docs/components\">shadcn&#39;s docs</a> and look at what&#39;s available. I see a Card component, let&#39;s use that.</p>\n<pre><code class=\"hljs language-bash\">npx shadcn@3.3.1 add @shadcn/card\n</code></pre><p>Then create a wiki-card.tsx file in your ui component directory.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Link</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Card</span>,\n  <span class=\"hljs-title class_\">CardHeader</span>,\n  <span class=\"hljs-title class_\">CardTitle</span>,\n  <span class=\"hljs-title class_\">CardDescription</span>,\n  <span class=\"hljs-title class_\">CardContent</span>,\n  <span class=\"hljs-title class_\">CardFooter</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/ui/card&quot;</span>;\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WikiCardProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">author</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WikiCard</span>(<span class=\"hljs-params\">{\n  title,\n  author,\n  date,\n  summary,\n  href,\n}: <span class=\"hljs-title class_\">WikiCardProps</span></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardHeader</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;pb-2&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;flex items-center gap-2 text-xs text-muted-foreground&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{author}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>•<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{date}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardTitle</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-lg&quot;</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardTitle</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardHeader</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardContent</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;py-0&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardDescription</span>&gt;</span>{summary}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardDescription</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardContent</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CardFooter</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;pt-2&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{href}</span>\n          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-blue-600 hover:underline text-sm font-medium w-fit&quot;</span>\n        &gt;</span>\n          Read article <span class=\"hljs-symbol\">&amp;rarr;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CardFooter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</code></pre><p>Nothing too crazy here. Let&#39;s go redo our page.tsx to use it. (Feel free to copy/paste here.)</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NavBar</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/nav/nav-bar&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WikiCard</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/ui/wiki-card&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Home</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavBar</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;max-w-2xl mx-auto mt-10 flex flex-col gap-6&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WikiCard</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Complete Intro to React&quot;</span>\n          <span class=\"hljs-attr\">author</span>=<span class=\"hljs-string\">&quot;Brian Holt&quot;</span>\n          <span class=\"hljs-attr\">date</span>=<span class=\"hljs-string\">&quot;Sep 2025&quot;</span>\n          <span class=\"hljs-attr\">summary</span>=<span class=\"hljs-string\">&quot;Learn React from the ground up with Brian Holt. Covers components, hooks, state, effects, and building modern UIs. Perfect for beginners and those wanting a solid foundation.&quot;</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://frontendmasters.com/courses/complete-react-v9/&quot;</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WikiCard</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Rust for TypeScript Developers&quot;</span>\n          <span class=\"hljs-attr\">author</span>=<span class=\"hljs-string\">&quot;ThePrimeagen&quot;</span>\n          <span class=\"hljs-attr\">date</span>=<span class=\"hljs-string\">&quot;Sep 2025&quot;</span>\n          <span class=\"hljs-attr\">summary</span>=<span class=\"hljs-string\">&quot;ThePrimeagen teaches Rust to JavaScript/TypeScript devs. Dive into Rust&#x27;s memory safety, ownership, and concurrency with fun, practical examples.&quot;</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://frontendmasters.com/courses/rust-typescript/&quot;</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WikiCard</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;API Design &amp; Node.js&quot;</span>\n          <span class=\"hljs-attr\">author</span>=<span class=\"hljs-string\">&quot;Scott Moss&quot;</span>\n          <span class=\"hljs-attr\">date</span>=<span class=\"hljs-string\">&quot;Sep 2025&quot;</span>\n          <span class=\"hljs-attr\">summary</span>=<span class=\"hljs-string\">&quot;Scott Moss covers building robust APIs with Node.js. Learn REST, authentication, testing, and best practices for scalable backend services.&quot;</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://frontendmasters.com/courses/api-design-nodejs/&quot;</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WikiCard</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;CSS Grid &amp; Flexbox&quot;</span>\n          <span class=\"hljs-attr\">author</span>=<span class=\"hljs-string\">&quot;Steve Kinney&quot;</span>\n          <span class=\"hljs-attr\">date</span>=<span class=\"hljs-string\">&quot;Sep 2025&quot;</span>\n          <span class=\"hljs-attr\">summary</span>=<span class=\"hljs-string\">&quot;Steve Kinney demystifies CSS Grid and Flexbox. Master layout techniques for responsive, modern web apps with hands-on demos and clear explanations.&quot;</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://frontendmasters.com/courses/css-grid-flexbox-v2/&quot;</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><p>That&#39;s it! That&#39;s the whole loop for managing shadcn, Tailwind, and Radix.</p>\n<blockquote>\n<p>🏁 This is the <a href=\"https://github.com/btholt/fullstack-next-wiki/tree/main/01-shadcn\">01-shadcn</a> checkpoint. Open that folder in the sample project repo to go to where we are as of right here.</p>\n</blockquote>\n","markdown":"\nWe are going to be using [shadcn ui][shadcn] for our design system. Let's dissect that a bit further.\n\n- shadcn UI is based on [Radix][radix] (this is a good blog post on the difference). Radix is a component library that provides unstyled primitives that are well designed for accessibility and usability. shadcn takes these and adds a sane set of default styles to them.\n- Both of these are in turn built on top of [Tailwind][tailwind]. Tailwind is a styling system that breaks every CSS value into its own CSS class, so instead of having stylesheets, you just directly apply the CSS to your React. If you've never used it before it can be abrasive but over time it's won over a critical mass of UI developers. When done well it's a delight to work in.\n\n> Fun fact: [shadcn is a person][x]. He works at Vercel.\n\nEssentially it's a opinionated set of styles and components. It's also a CLI that adds the components as you need them - it doesn't include everything at once which is nice.\n\nLet's go ahead and initialize it.\n\n```bash\nnpx shadcn@3.3.1 init\n```\n\n> Normally you should do `shadcn@latest` but we're going to be sticking to 3.3.1 for this course.\n\nThis will ask you to choose a tone. I think I went with slate? Feel free to choose your own base tone.\n\nThis should add some styles and make some modifications to your project. One thing to note is that this will include some global styles, but in and of itself shadcn is a component system. You need to individually add components. It does install a few dependencies like the icon library, some CSS helpers, and such. Don't worry about those too much - it's all for shadcn.\n\n```bash\nnpx shadcn@3.3.1 add @shadcn/navigation-menu\nnpx shadcn@3.3.1 add @shadcn/button\n```\n\nNotice inside your app directory there is now a component/ui directory, and it has a navigation-menu.tsx and a button.tsx file in it. This is how shadcn works - it adds the code for the component to your library. This is cool because now it's _your_ component. Rather than trying to rebase and monkey patch a library, you can just directly edit the code. Long term this is more sustainable for using shadcn to craft your own design system instead of just a thin wrapper on top of something like Bootstrap.\n\nLet's go ahead and make a navigation menu using our new component (we're not going to modify any of the shadcn components themselves today but you should feel free to, that's why the code is in your codebase!)\n\nCreate `nav-bar.tsx` in your components directory and put:\n\n```typescript\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n} from \"@/components/ui/navigation-menu\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function NavBar() {\n  return (\n    <nav className=\"w-full border-b bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60 sticky top-0 z-50\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center gap-2\">\n          <Link\n            href=\"/\"\n            className=\"font-bold text-xl tracking-tight text-gray-900\"\n          >\n            Wikimasters\n          </Link>\n        </div>\n        <NavigationMenu>\n          <NavigationMenuList className=\"flex items-center gap-2\">\n            <NavigationMenuItem>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/signin\">Sign In</Link>\n              </Button>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <Button asChild>\n                <Link href=\"/signup\">Sign Up</Link>\n              </Button>\n            </NavigationMenuItem>\n          </NavigationMenuList>\n        </NavigationMenu>\n      </div>\n    </nav>\n  );\n}\n```\n\nThis is what working in Tailwind feels like (and thus Radix and shadcn, since they all use Tailwind). People think this feels gross, not using CSS and putting it all in the class, but here's the pitch. Everything we make in React is a component, and in theory we should compose all our pages of components that are glued together with bits of CSS. If you're following this pattern, all the components get self-contained CSS in their React components, and the bit of CSS you would write to glue pages together well ends up just being on the page itself via Tailwind classes. If you have something that _should_ share CSS with something else, then it should be a component.\n\nIn practice, I find this to be about 95% true - most things can just live in Tailwind classes with components. If you've ever maintained a large project before, you know deleting CSS is the hardest thing to do - it's so hard to tell what's used and what's not. When I worked at LinkedIn in 2015-ish, they had _2 megabytes_ of CSS, most of which was hand written. They had no idea how to fix it, and it's ultimately where the [CSS Blocks][blocks] project came from (which if it didn't inspire Tailwind, it certainly had similar goals.) We've tried so many ways to essentially get to this point - where code and styling are tightly linked in an obvious and non-footgun sort of way: [BEM][bem], [Atomic CSS][atomic], [styled-components][styled], [Emotion][emotion], and [CSS modules][modules]. [Sass][sass], [Less][less], and [Stylus][stylus] deserve mention too!\n\nAs you can see, we've been around the bend and many a heated discussion has been had on how best to style a project, and this just one of them (albeit the most popular at the moment.) I'm okay if you choose not to use Tailwind or these things on your projects, but it's what we're going to use today.\n\nOkay, let's go add our nav bar to layout. Go to layout.tsx and add\n\n```typescript\n// at top\nimport { NavBar } from \"@/components/ui/nav-bar\";\n\n// just inside <body>\n<NavBar />;\n```\n\nRun your dev server with `npm run dev` and you should see your nav bar!\n\nLet's do one more and add wiki card components to show the loop again. Go to [shadcn's docs][docs] and look at what's available. I see a Card component, let's use that.\n\n```bash\nnpx shadcn@3.3.1 add @shadcn/card\n```\n\nThen create a wiki-card.tsx file in your ui component directory.\n\n```typescript\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from \"@/components/ui/card\";\n\ninterface WikiCardProps {\n  title: string;\n  author: string;\n  date: string;\n  summary: string;\n  href: string;\n}\n\nexport function WikiCard({\n  title,\n  author,\n  date,\n  summary,\n  href,\n}: WikiCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n          <span>{author}</span>\n          <span>•</span>\n          <span>{date}</span>\n        </div>\n        <CardTitle className=\"text-lg\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"py-0\">\n        <CardDescription>{summary}</CardDescription>\n      </CardContent>\n      <CardFooter className=\"pt-2\">\n        <Link\n          href={href}\n          className=\"text-blue-600 hover:underline text-sm font-medium w-fit\"\n        >\n          Read article &rarr;\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\nNothing too crazy here. Let's go redo our page.tsx to use it. (Feel free to copy/paste here.)\n\n```typescript\nimport { NavBar } from \"@/components/nav/nav-bar\";\nimport { WikiCard } from \"@/components/ui/wiki-card\";\n\nexport default function Home() {\n  return (\n    <div>\n      <NavBar />\n      <main className=\"max-w-2xl mx-auto mt-10 flex flex-col gap-6\">\n        <WikiCard\n          title=\"Complete Intro to React\"\n          author=\"Brian Holt\"\n          date=\"Sep 2025\"\n          summary=\"Learn React from the ground up with Brian Holt. Covers components, hooks, state, effects, and building modern UIs. Perfect for beginners and those wanting a solid foundation.\"\n          href=\"https://frontendmasters.com/courses/complete-react-v9/\"\n        />\n        <WikiCard\n          title=\"Rust for TypeScript Developers\"\n          author=\"ThePrimeagen\"\n          date=\"Sep 2025\"\n          summary=\"ThePrimeagen teaches Rust to JavaScript/TypeScript devs. Dive into Rust's memory safety, ownership, and concurrency with fun, practical examples.\"\n          href=\"https://frontendmasters.com/courses/rust-typescript/\"\n        />\n        <WikiCard\n          title=\"API Design & Node.js\"\n          author=\"Scott Moss\"\n          date=\"Sep 2025\"\n          summary=\"Scott Moss covers building robust APIs with Node.js. Learn REST, authentication, testing, and best practices for scalable backend services.\"\n          href=\"https://frontendmasters.com/courses/api-design-nodejs/\"\n        />\n        <WikiCard\n          title=\"CSS Grid & Flexbox\"\n          author=\"Steve Kinney\"\n          date=\"Sep 2025\"\n          summary=\"Steve Kinney demystifies CSS Grid and Flexbox. Master layout techniques for responsive, modern web apps with hands-on demos and clear explanations.\"\n          href=\"https://frontendmasters.com/courses/css-grid-flexbox-v2/\"\n        />\n      </main>\n    </div>\n  );\n}\n```\n\nThat's it! That's the whole loop for managing shadcn, Tailwind, and Radix.\n\n> 🏁 This is the [01-shadcn][checkpoint] checkpoint. Open that folder in the sample project repo to go to where we are as of right here.\n\n[checkpoint]: https://github.com/btholt/fullstack-next-wiki/tree/main/01-shadcn\n[shadcn]: https://ui.shadcn.com/\n[radix]: https://workos.com/blog/what-is-the-difference-between-radix-and-shadcn-ui\n[x]: https://x.com/shadcn\n[blocks]: https://css-blocks.com/\n[modules]: https://github.com/css-modules/css-modules\n[bem]: https://getbem.com/\n[styled]: https://styled-components.com/\n[emotion]: https://emotion.sh/docs/introduction\n[atomic]: https://acss-io.github.io/atomizer/\n[sass]: https://sass-lang.com/\n[less]: https://lesscss.org/\n[stylus]: https://stylus-lang.com/\n[docs]: https://ui.shadcn.com/docs/components\n","slug":"shadcn","title":"shadcn","section":"Styling","icon":"palette","filePath":"/home/runner/work/build-a-fullstack-nextjs-app-v4/build-a-fullstack-nextjs-app-v4/lessons/02-styling/A-shadcn.md","nextSlug":"/lessons/styling/scaling-tailwind","prevSlug":"/lessons/welcome/create-next-app"}},"__N_SSG":true}