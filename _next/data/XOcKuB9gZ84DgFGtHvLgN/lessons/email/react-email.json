{"pageProps":{"post":{"attributes":{},"html":"<p>Have you ever tried to write markup for emails? It&#39;s horrible. It&#39;s like living twenty-five+ years in the past. Even basic CSS is asking too much.</p>\n<p>Enter React Email - they built a framework around writing normal React and it takes that and outputs markup for email clients that works. It&#39;s so much better than things ever used to be. So, so, so much better.</p>\n<p>So let&#39;s modify our celebration email to use an email template with React Email.</p>\n<p>Let&#39;s make a templates directory inside of the emails folder. In there, let&#39;s put a celebration-template.tsx and put this.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Props</span> = {\n  <span class=\"hljs-attr\">name</span>?: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">pageviews</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">articleTitle</span>?: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">articleUrl</span>?: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CelebrationTemplate</span> = (<span class=\"hljs-params\">{\n  name,\n  pageviews,\n  articleTitle,\n  articleUrl,\n}: <span class=\"hljs-title class_\">Props</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">backgroundColor:</span> &quot;#<span class=\"hljs-attr\">f8fafc</span>&quot;,\n          <span class=\"hljs-attr\">margin:</span> <span class=\"hljs-attr\">0</span>,\n          <span class=\"hljs-attr\">padding:</span> <span class=\"hljs-attr\">20</span>,\n          <span class=\"hljs-attr\">fontFamily:</span>\n            &quot;<span class=\"hljs-attr\">Inter</span>, <span class=\"hljs-attr\">ui-sans-serif</span>, <span class=\"hljs-attr\">system-ui</span>, <span class=\"hljs-attr\">-apple-system</span>, &#x27;<span class=\"hljs-attr\">Segoe</span> <span class=\"hljs-attr\">UI</span>&#x27;, <span class=\"hljs-attr\">Roboto</span>, &#x27;<span class=\"hljs-attr\">Helvetica</span> <span class=\"hljs-attr\">Neue</span>&#x27;, <span class=\"hljs-attr\">Arial</span>&quot;,\n          <span class=\"hljs-attr\">color:</span> &quot;#<span class=\"hljs-attr\">0f172a</span>&quot;,\n        }}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>\n          <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n          <span class=\"hljs-attr\">cellPadding</span>=<span class=\"hljs-string\">{0}</span>\n          <span class=\"hljs-attr\">cellSpacing</span>=<span class=\"hljs-string\">{0}</span>\n          <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">&quot;presentation&quot;</span>\n          <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">maxWidth:</span> <span class=\"hljs-attr\">600</span>, <span class=\"hljs-attr\">margin:</span> &quot;<span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">auto</span>&quot; }}\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">paddingBottom:</span> <span class=\"hljs-attr\">12</span> }}&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">textAlign:</span> &quot;<span class=\"hljs-attr\">left</span>&quot; }}&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">18</span>, <span class=\"hljs-attr\">color:</span> &quot;#<span class=\"hljs-attr\">0f172a</span>&quot; }}&gt;</span>\n                  Wikimasters\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                  <span class=\"hljs-attr\">background:</span> &quot;#<span class=\"hljs-attr\">ffffff</span>&quot;,\n                  <span class=\"hljs-attr\">borderRadius:</span> <span class=\"hljs-attr\">8</span>,\n                  <span class=\"hljs-attr\">padding:</span> <span class=\"hljs-attr\">24</span>,\n                  <span class=\"hljs-attr\">boxShadow:</span> &quot;<span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">1px</span> <span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">rgba</span>(<span class=\"hljs-attr\">15</span>,<span class=\"hljs-attr\">23</span>,<span class=\"hljs-attr\">42</span>,<span class=\"hljs-attr\">0.04</span>)&quot;,\n                }}\n              &gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>\n                  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                    <span class=\"hljs-attr\">margin:</span> &quot;<span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">8px</span> <span class=\"hljs-attr\">0</span>&quot;,\n                    <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">20</span>,\n                    <span class=\"hljs-attr\">lineHeight:</span> &quot;<span class=\"hljs-attr\">28px</span>&quot;,\n                  }}\n                &gt;</span>\n                  🎉 Nice work{name ? `, ${name}` : &quot;&quot;}!\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">margin:</span> &quot;<span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">16px</span> <span class=\"hljs-attr\">0</span>&quot;, <span class=\"hljs-attr\">color:</span> &quot;#<span class=\"hljs-attr\">334155</span>&quot; }}&gt;</span>\n                  Your article{articleTitle ? ` &quot;${articleTitle}&quot;` : &quot;&quot;} just\n                  hit <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>{pageviews}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span> views — that&#x27;s a milestone.\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n                {articleUrl ? (\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n                    <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{articleUrl}</span>\n                    <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                      <span class=\"hljs-attr\">display:</span> &quot;<span class=\"hljs-attr\">inline-block</span>&quot;,\n                      <span class=\"hljs-attr\">textDecoration:</span> &quot;<span class=\"hljs-attr\">none</span>&quot;,\n                      <span class=\"hljs-attr\">background:</span> &quot;#<span class=\"hljs-attr\">0ea5a4</span>&quot;,\n                      <span class=\"hljs-attr\">color:</span> &quot;<span class=\"hljs-attr\">white</span>&quot;,\n                      <span class=\"hljs-attr\">padding:</span> &quot;<span class=\"hljs-attr\">10px</span> <span class=\"hljs-attr\">14px</span>&quot;,\n                      <span class=\"hljs-attr\">borderRadius:</span> <span class=\"hljs-attr\">6</span>,\n                      <span class=\"hljs-attr\">fontWeight:</span> <span class=\"hljs-attr\">600</span>,\n                    }}\n                  &gt;</span>\n                    View article\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n                ) : null}\n\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">marginTop:</span> <span class=\"hljs-attr\">18</span>, <span class=\"hljs-attr\">color:</span> &quot;#<span class=\"hljs-attr\">94a3b8</span>&quot;, <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">13</span> }}&gt;</span>\n                  Keep writing — you&#x27;re helping other people learn. — The\n                  Wikimasters team\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">paddingTop:</span> <span class=\"hljs-attr\">14</span> }}&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">margin:</span> <span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">color:</span> &quot;#<span class=\"hljs-attr\">94a3b8</span>&quot;, <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-attr\">12</span> }}&gt;</span>\n                You’re receiving this email because you authored content on\n                Wikimasters.\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">CelebrationTemplate</span>;\n</code></pre><ul>\n<li>Pretty simple React using inline styles</li>\n<li>You can use the <a href=\"https://www.npmjs.com/package/@react-email/tailwind\">react-email/tailwind</a> if you feel like you need to be consistent. I found it to be less helpful than just inlining styles.</li>\n<li>Otherwise this is just simple React.</li>\n</ul>\n<p>Let&#39;s go make it work. Rename <code>celebration-email.ts</code>&#39;s file extension to <code>celebration-email.tsx</code> so it can use React in it. Now modify it.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">CelebrationTemplate</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./templates/celebration-template&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">BASE_URL</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VERCEL_URL</span>\n  ? <span class=\"hljs-string\">`https://<span class=\"hljs-subst\">${process.env.VERCEL_URL}</span>`</span>\n  : <span class=\"hljs-string\">&quot;http://localhost:3000&quot;</span>;\n\n<span class=\"hljs-comment\">// grab name and title</span>\n<span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-title function_\">select</span>({\n  <span class=\"hljs-attr\">email</span>: usersSync.<span class=\"hljs-property\">email</span>,\n  <span class=\"hljs-attr\">id</span>: usersSync.<span class=\"hljs-property\">id</span>,\n  <span class=\"hljs-attr\">title</span>: articles.<span class=\"hljs-property\">title</span>,\n  <span class=\"hljs-attr\">name</span>: usersSync.<span class=\"hljs-property\">name</span>,\n});\n\n<span class=\"hljs-comment\">// grab title and name too</span>\n<span class=\"hljs-keyword\">const</span> { email, id, title, name } = response[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-keyword\">const</span> emailRes = <span class=\"hljs-keyword\">await</span> resend.<span class=\"hljs-property\">emails</span>.<span class=\"hljs-title function_\">send</span>({\n  <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">&quot;Wikimasters &lt;noreply@mail.holt.courses&gt;&quot;</span>, <span class=\"hljs-comment\">// replace with your domain when ready</span>\n  <span class=\"hljs-attr\">to</span>: email,\n  <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">`✨ Your article got <span class=\"hljs-subst\">${pageviews}</span> views! ✨`</span>,\n  <span class=\"hljs-attr\">react</span>: (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CelebrationTemplate</span>\n      <span class=\"hljs-attr\">articleTitle</span>=<span class=\"hljs-string\">{title}</span>\n      <span class=\"hljs-attr\">articleUrl</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">BASE_URL</span>}/<span class=\"hljs-attr\">wiki</span>/${<span class=\"hljs-attr\">articleId</span>}`}\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name</span> ?? &quot;<span class=\"hljs-attr\">Friend</span>&quot;}\n      <span class=\"hljs-attr\">pageviews</span>=<span class=\"hljs-string\">{pageviews}</span>\n    /&gt;</span></span>\n  ),\n});\n</code></pre><ul>\n<li>Normally I&#39;d be a bit more useful about the BASE_URL, but for here it&#39;s fine for the email</li>\n<li>Otherwise it&#39;s just getting the right data to render.</li>\n<li>These emails look great! And we don&#39;t have to write painful email templates.</li>\n<li>Vercel will populate that URL automatically - otherwise we want it to head to local dev.</li>\n</ul>\n<p>Congrats! Adding email to a modern app is so easy. Adding something like Twilio for texting isn&#39;t super hard either, it&#39;ll feel very similar.</p>\n<blockquote>\n<p>🏁 This is the <a href=\"https://github.com/btholt/fullstack-next-wiki/tree/main/07-email\">07-email</a> checkpoint. Open that folder in the sample project repo to go to where we are as of right here.</p>\n</blockquote>\n","markdown":"Have you ever tried to write markup for emails? It's horrible. It's like living twenty-five+ years in the past. Even basic CSS is asking too much.\n\nEnter React Email - they built a framework around writing normal React and it takes that and outputs markup for email clients that works. It's so much better than things ever used to be. So, so, so much better.\n\nSo let's modify our celebration email to use an email template with React Email.\n\nLet's make a templates directory inside of the emails folder. In there, let's put a celebration-template.tsx and put this.\n\n```typescript\ntype Props = {\n  name?: string;\n  pageviews: number;\n  articleTitle?: string;\n  articleUrl?: string;\n};\n\nconst CelebrationTemplate = ({\n  name,\n  pageviews,\n  articleTitle,\n  articleUrl,\n}: Props) => {\n  return (\n    <html>\n      <body\n        style={{\n          backgroundColor: \"#f8fafc\",\n          margin: 0,\n          padding: 20,\n          fontFamily:\n            \"Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial\",\n          color: \"#0f172a\",\n        }}\n      >\n        <table\n          width=\"100%\"\n          cellPadding={0}\n          cellSpacing={0}\n          role=\"presentation\"\n          style={{ maxWidth: 600, margin: \"0 auto\" }}\n        >\n          <tr>\n            <td style={{ paddingBottom: 12 }}>\n              <div style={{ textAlign: \"left\" }}>\n                <strong style={{ fontSize: 18, color: \"#0f172a\" }}>\n                  Wikimasters\n                </strong>\n              </div>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <div\n                style={{\n                  background: \"#ffffff\",\n                  borderRadius: 8,\n                  padding: 24,\n                  boxShadow: \"0 1px 0 rgba(15,23,42,0.04)\",\n                }}\n              >\n                <h1\n                  style={{\n                    margin: \"0 0 8px 0\",\n                    fontSize: 20,\n                    lineHeight: \"28px\",\n                  }}\n                >\n                  🎉 Nice work{name ? `, ${name}` : \"\"}!\n                </h1>\n\n                <p style={{ margin: \"0 0 16px 0\", color: \"#334155\" }}>\n                  Your article{articleTitle ? ` \"${articleTitle}\"` : \"\"} just\n                  hit <strong>{pageviews}</strong> views — that's a milestone.\n                </p>\n\n                {articleUrl ? (\n                  <a\n                    href={articleUrl}\n                    style={{\n                      display: \"inline-block\",\n                      textDecoration: \"none\",\n                      background: \"#0ea5a4\",\n                      color: \"white\",\n                      padding: \"10px 14px\",\n                      borderRadius: 6,\n                      fontWeight: 600,\n                    }}\n                  >\n                    View article\n                  </a>\n                ) : null}\n\n                <p style={{ marginTop: 18, color: \"#94a3b8\", fontSize: 13 }}>\n                  Keep writing — you're helping other people learn. — The\n                  Wikimasters team\n                </p>\n              </div>\n            </td>\n          </tr>\n\n          <tr>\n            <td style={{ paddingTop: 14 }}>\n              <p style={{ margin: 0, color: \"#94a3b8\", fontSize: 12 }}>\n                You’re receiving this email because you authored content on\n                Wikimasters.\n              </p>\n            </td>\n          </tr>\n        </table>\n      </body>\n    </html>\n  );\n};\n\nexport default CelebrationTemplate;\n```\n\n- Pretty simple React using inline styles\n- You can use the [react-email/tailwind][tw] if you feel like you need to be consistent. I found it to be less helpful than just inlining styles.\n- Otherwise this is just simple React.\n\nLet's go make it work. Rename `celebration-email.ts`'s file extension to `celebration-email.tsx` so it can use React in it. Now modify it.\n\n```typescript\n// at top\nimport CelebrationTemplate from \"./templates/celebration-template\";\n\nconst BASE_URL = process.env.VERCEL_URL\n  ? `https://${process.env.VERCEL_URL}`\n  : \"http://localhost:3000\";\n\n// grab name and title\nconst response = await db.select({\n  email: usersSync.email,\n  id: usersSync.id,\n  title: articles.title,\n  name: usersSync.name,\n});\n\n// grab title and name too\nconst { email, id, title, name } = response[0];\n\nconst emailRes = await resend.emails.send({\n  from: \"Wikimasters <noreply@mail.holt.courses>\", // replace with your domain when ready\n  to: email,\n  subject: `✨ Your article got ${pageviews} views! ✨`,\n  react: (\n    <CelebrationTemplate\n      articleTitle={title}\n      articleUrl={`${BASE_URL}/wiki/${articleId}`}\n      name={name ?? \"Friend\"}\n      pageviews={pageviews}\n    />\n  ),\n});\n```\n\n- Normally I'd be a bit more useful about the BASE_URL, but for here it's fine for the email\n- Otherwise it's just getting the right data to render.\n- These emails look great! And we don't have to write painful email templates.\n- Vercel will populate that URL automatically - otherwise we want it to head to local dev.\n\nCongrats! Adding email to a modern app is so easy. Adding something like Twilio for texting isn't super hard either, it'll feel very similar.\n\n> 🏁 This is the [07-email][checkpoint] checkpoint. Open that folder in the sample project repo to go to where we are as of right here.\n\n[checkpoint]: https://github.com/btholt/fullstack-next-wiki/tree/main/07-email\n[react-email]: https://react.email/\n[tw]: https://www.npmjs.com/package/@react-email/tailwind\n","slug":"react-email","title":"React Email","section":"Email","icon":"envelope","filePath":"/home/runner/work/build-a-fullstack-nextjs-app-v4/build-a-fullstack-nextjs-app-v4/lessons/07-email/C-react-email.md","nextSlug":"/lessons/ai/vercel-ai-gateway","prevSlug":"/lessons/email/send-emails-to-users"}},"__N_SSG":true}