{"pageProps":{"post":{"attributes":{},"html":"<p>And with that, we have fully finished our full stack wiki app! Congrats!</p>\n<p>I always like to leave some suggestions of how to tinker around afterwards so you can extend your understanding - we have a very cool app, what could we do?</p>\n<h1>Extending Wikimasters - Project Ideas</h1>\n<p>Here are some ideas for expanding the Wikimasters project to practice concepts you&#39;ve learned or branch into adjacent areas:</p>\n<h2>New Features &amp; Services</h2>\n<h3>Search &amp; Discovery</h3>\n<ul>\n<li>Add full-text search using Postgres&#39;s built-in search or Algolia/Typesense</li>\n<li>Implement tag/category system for organizing articles</li>\n<li>Create a &quot;related articles&quot; feature using embeddings and vector search</li>\n</ul>\n<h3>Collaboration Features</h3>\n<ul>\n<li>Add comments/discussions on articles using something like Commento or build your own</li>\n<li>Implement article revision history (show diffs between versions)</li>\n<li>Add collaborative editing with presence indicators (who&#39;s viewing/editing) with something like PartyKit</li>\n<li>Create article templates that users can start from</li>\n</ul>\n<h3>Content Enhancement</h3>\n<ul>\n<li>Integrate an AI writing assistant (suggest improvements, fix grammar)</li>\n<li>Implement table of contents auto-generation from markdown headings</li>\n</ul>\n<h3>Media &amp; Assets</h3>\n<ul>\n<li>Add drag-and-drop image uploads with a nice UI with the ability to have multiple images</li>\n<li>Create an image gallery/media library for reusing images</li>\n<li>Implement PDF generation for articles (export to PDF)</li>\n<li>Add Open Graph image generation for social sharing</li>\n</ul>\n<h3>Notifications &amp; Communication</h3>\n<ul>\n<li>Add real-time notifications using Pusher or Socket.io</li>\n<li>Implement @mentions in articles to notify other users</li>\n<li>Create a daily/weekly digest email of new/updated articles</li>\n<li>Add Slack/Discord webhook integration for team notifications</li>\n<li>Add Twilio for text notifications</li>\n</ul>\n<h3>Analytics &amp; Insights</h3>\n<ul>\n<li>Track article views and reading time</li>\n<li>Create a dashboard showing popular articles, active authors</li>\n<li>Add activity feeds (recent edits, new articles, trending content)</li>\n<li>Implement article analytics (which sections get read most)</li>\n</ul>\n<h3>Quality &amp; Workflow</h3>\n<ul>\n<li>Add article drafts vs published state workflow</li>\n<li>Implement peer review/approval process before publishing</li>\n<li>Create article templates or boilerplates</li>\n<li>Add spell-check and grammar checking with LanguageTool API</li>\n</ul>\n<h3>Performance &amp; Scale</h3>\n<ul>\n<li>Implement incremental static regeneration for popular articles</li>\n<li>Add edge caching with Cloudflare Workers</li>\n<li>Set up database read replicas on Neon for scaling reads</li>\n<li>Implement pagination or infinite scroll for article lists</li>\n</ul>\n<h3>Developer Experience</h3>\n<ul>\n<li>Create webhooks for article events (published, updated)</li>\n<li>Build a CLI tool for bulk importing markdown files</li>\n<li>Add export functionality (download all your articles as markdown)</li>\n</ul>\n<h3>Fun &amp; Experimental</h3>\n<ul>\n<li>Add dark mode toggle (practice theme management)</li>\n<li>Implement keyboard shortcuts for power users</li>\n<li>Add voice-to-text for article dictation</li>\n</ul>\n<h2>Refactoring &amp; Best Practices</h2>\n<h3>Code Quality</h3>\n<ul>\n<li>Expand test coverage to 80%+ (practice TDD)</li>\n<li>Add Storybook for component documentation</li>\n<li>Implement proper error boundaries throughout the app</li>\n<li>Add loading skeletons for better perceived performance</li>\n</ul>\n<h3>Architecture</h3>\n<ul>\n<li>Refactor to use a design system (practice component architecture)</li>\n<li>Implement proper logging with Pino or Winston</li>\n<li>Add feature flags with one of the vendors on the Vercel Marketplace</li>\n<li>Set up deployment environments with dev, staging, and prod</li>\n<li>Set up rolling deployments and canary deployments</li>\n</ul>\n<h3>Security</h3>\n<ul>\n<li>Add two-factor authentication</li>\n<li>Implement content security policy (CSP)</li>\n<li>Add rate limiting to prevent abuse</li>\n<li>Implement audit logs (who did what when)</li>\n</ul>\n<h2>Integration Ideas</h2>\n<h3>External Services</h3>\n<ul>\n<li>Integrate with GitHub to sync markdown files</li>\n<li>Add Google Drive import/export</li>\n<li>Connect to Notion API for syncing</li>\n<li>Implement SSO with Okta or Auth0</li>\n<li>Set up proper dev auth by making another Neon project and sync&#39;ing anonymized users from prod into dev</li>\n</ul>\n<h3>AI/ML</h3>\n<ul>\n<li>Auto-generate article summaries with GPT</li>\n<li>Implement semantic search using embeddings</li>\n<li>Add content moderation with OpenAI Moderation API</li>\n<li>Create AI-powered article recommendations</li>\n</ul>\n<h3>Monitoring &amp; Ops</h3>\n<ul>\n<li>Set up more sophisticated monitoring with Datadog or New Relic</li>\n<li>Add error tracking with Sentry (beyond basics)</li>\n<li>Implement uptime monitoring with Pingdom</li>\n<li>Create status page for service health</li>\n</ul>\n","markdown":"And with that, we have fully finished our full stack wiki app! Congrats!\n\nI always like to leave some suggestions of how to tinker around afterwards so you can extend your understanding - we have a very cool app, what could we do?\n\n# Extending Wikimasters - Project Ideas\n\nHere are some ideas for expanding the Wikimasters project to practice concepts you've learned or branch into adjacent areas:\n\n## New Features & Services\n\n### Search & Discovery\n\n- Add full-text search using Postgres's built-in search or Algolia/Typesense\n- Implement tag/category system for organizing articles\n- Create a \"related articles\" feature using embeddings and vector search\n\n### Collaboration Features\n\n- Add comments/discussions on articles using something like Commento or build your own\n- Implement article revision history (show diffs between versions)\n- Add collaborative editing with presence indicators (who's viewing/editing) with something like PartyKit\n- Create article templates that users can start from\n\n### Content Enhancement\n\n- Integrate an AI writing assistant (suggest improvements, fix grammar)\n- Implement table of contents auto-generation from markdown headings\n\n### Media & Assets\n\n- Add drag-and-drop image uploads with a nice UI with the ability to have multiple images\n- Create an image gallery/media library for reusing images\n- Implement PDF generation for articles (export to PDF)\n- Add Open Graph image generation for social sharing\n\n### Notifications & Communication\n\n- Add real-time notifications using Pusher or Socket.io\n- Implement @mentions in articles to notify other users\n- Create a daily/weekly digest email of new/updated articles\n- Add Slack/Discord webhook integration for team notifications\n- Add Twilio for text notifications\n\n### Analytics & Insights\n\n- Track article views and reading time\n- Create a dashboard showing popular articles, active authors\n- Add activity feeds (recent edits, new articles, trending content)\n- Implement article analytics (which sections get read most)\n\n### Quality & Workflow\n\n- Add article drafts vs published state workflow\n- Implement peer review/approval process before publishing\n- Create article templates or boilerplates\n- Add spell-check and grammar checking with LanguageTool API\n\n### Performance & Scale\n\n- Implement incremental static regeneration for popular articles\n- Add edge caching with Cloudflare Workers\n- Set up database read replicas on Neon for scaling reads\n- Implement pagination or infinite scroll for article lists\n\n### Developer Experience\n\n- Create webhooks for article events (published, updated)\n- Build a CLI tool for bulk importing markdown files\n- Add export functionality (download all your articles as markdown)\n\n### Fun & Experimental\n\n- Add dark mode toggle (practice theme management)\n- Implement keyboard shortcuts for power users\n- Add voice-to-text for article dictation\n\n## Refactoring & Best Practices\n\n### Code Quality\n\n- Expand test coverage to 80%+ (practice TDD)\n- Add Storybook for component documentation\n- Implement proper error boundaries throughout the app\n- Add loading skeletons for better perceived performance\n\n### Architecture\n\n- Refactor to use a design system (practice component architecture)\n- Implement proper logging with Pino or Winston\n- Add feature flags with one of the vendors on the Vercel Marketplace\n- Set up deployment environments with dev, staging, and prod\n- Set up rolling deployments and canary deployments\n\n### Security\n\n- Add two-factor authentication\n- Implement content security policy (CSP)\n- Add rate limiting to prevent abuse\n- Implement audit logs (who did what when)\n\n## Integration Ideas\n\n### External Services\n\n- Integrate with GitHub to sync markdown files\n- Add Google Drive import/export\n- Connect to Notion API for syncing\n- Implement SSO with Okta or Auth0\n- Set up proper dev auth by making another Neon project and sync'ing anonymized users from prod into dev\n\n### AI/ML\n\n- Auto-generate article summaries with GPT\n- Implement semantic search using embeddings\n- Add content moderation with OpenAI Moderation API\n- Create AI-powered article recommendations\n\n### Monitoring & Ops\n\n- Set up more sophisticated monitoring with Datadog or New Relic\n- Add error tracking with Sentry (beyond basics)\n- Implement uptime monitoring with Pingdom\n- Create status page for service health\n","slug":"what-more-you-can-do","title":"What More You Can Do","section":"Conclusion","icon":"trophy","filePath":"/home/runner/work/build-a-fullstack-nextjs-app-v4/build-a-fullstack-nextjs-app-v4/lessons/10-conclusion/A-what-more-you-can-do.md","nextSlug":"/lessons/conclusion/congrats","prevSlug":"/lessons/devops/continuous-integration"}},"__N_SSG":true}